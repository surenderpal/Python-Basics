# comparing list in python (==)
# comparing list is python (is keyword)
fruit=['apple','mango','banana']
fruits=['apple','mango','banana']
print(fruit == fruits) #== checks that values inside the list are equal or not
print(fruit is fruits)      # Is keyword checks that both list are in the same memory place or 
#---------------------------------------------------------------------------------
# List inside list is known as 2-D list
# 3 list inside the list is known as 3-D list
matrix = [[1,2,3],[4,5,6],[7,8,9]] # 3 items in the list
print(matrix[1])
# for loop inside the nested list
for sublist in matrix:
    for i in sublist:
        print(i)
print(matrix[2][0])
# Type function is used to check which type of data do we have.
print(type(matrix))
#-------------------------------------------------------------------------------------
# split method
# convert string to list
# join method
# convert list so string
# user_info = 'surender,pal'.split(',')   # split mehtod will convert string into the list.
# print(user_info)
user_info = ['surender','pal','24'] # list:-User info
print(','.join(user_info))          # conveting list into the string using Join method.
#--------------------------------------------------------------------------------------
# List vs Array
# Array: Ordered collection of item
# array: Can stroe only one data type in array like int, string, float, boolean
# List : Can store any data.
# Array Module : Python has an array module , module provide function,
# Array Module : We can store fixed data type in array module.
# Numpy Arrays : Used for calculation in data science instead of normal array.
# Numpy Arrays : It has better performance, it is binding in C language.
#--------------------------------------------------------------------------------------
# List Vs String
# Strings are immutable
# Lists are mutable
# We can't commit changes('Add/Delete') in the already declared string.
s = 'surender'      # Immutable means we can't change our string,
t = s.title()
print(t)

# In list we can commit change to the already declared list, we can (add/delete) item to the list
l = ['surender','kumar','pal']
print(l)
l.pop()             # Pop method will commit change is our original list and remove the last item from the list.
print(l)
l.append('23')      # appending in the list
print(l)
#--------------------------------------------------------------------------------------
# Lopping with the list
fruit =['orange','apple','pear','banana','kiwi']
# for loop with list
for i in fruit:
    print(i)
# While loop with list
i = 0               # First position in list is Zero(0), that's why we assing 0 to the i
while i > len(fruit):
    print(fruit[i])
    i = i + 1
#--------------------------------------------------------------------------------------
Exercises------
#exercise starts here
# Generate list with range function
# Something more about pop method
# Index method
# Pass list to a function
# numbers = list(range(1,11))     # Range function is being used to generate the list
numbers = [1,2,3,4,5,6,7,8,9,10]
# print(numbers)
poped_item = numbers.pop()      # Pop method also return poped item from the list
# print(poped_item)
# print(numbers)
list_index = numbers.index(3)   # Index method will return the index of item in the list   
# print(list_index)
# print(numbers)
# print(f"using indesxing:{numbers.index(2)}")
# print(numbers.index(1,14,20))    #Index method will start searching from the index 0, and it take three arguments "value, start position and end position"
#-----------Passing List inside the function as argument------------
def negaive_list(l):
    negative = []
    for i in l:
        negative.append(-i)
    return negative

print(negaive_list(numbers))
#--------------------------------------------------------------------------------------
#---programm that will take input list and will give you the square of the numbers inside the list-----
numbers = [1,2,3,4,5,6,7,8,9,10]
def square_list_fun(l):
    square_new_list = []        # empty list for square
    for i in l:
        square_new_list.append(i**2)  # Appending square in the new list
    return square_new_list
print(square_list_fun(numbers))
#--------------------------------------------------------------------------------------
#---program to print the item in reverse inside the list------
numbers=[1,2,3,4,5,6]      # list1
#----1st method-------------------
# def reverse_list(l):
#      l.reverse()
#      return l 
# print(reverse_list(numbers))
#----2nd method--------------------
# def reverse_list(l):
#    return l[::-1]
# print(reverse_list(numbers))
#-----3rd method-------------------
def reverse_list(l):
    r_list = []
    for i in range(len(l)):
        poped_item = l.pop()    # poping item from list
        r_list.append(poped_item)   # appending item to the list
    return r_list
print(reverse_list(numbers))
#--------------------------------------------------------------------------------------
#---program to reverse item in the list---
def reverse_element(l):
    elements = []
    for i in l:
        elements.append(i[::-1])
    return elements
words = ['surender','kumar','pal']
reversed_list = reverse_element(words)
print(reversed_list)


